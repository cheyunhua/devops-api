# Generated by Django 3.1.1 on 2020-11-11 04:55

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserInfo',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_id', models.BigIntegerField(primary_key=True, serialize=False, unique=True, verbose_name='用户ID')),
                ('mobile', models.CharField(max_length=11, verbose_name='手机号')),
                ('name', models.CharField(max_length=32, verbose_name='姓名')),
                ('job_number', models.CharField(max_length=32, verbose_name='工号')),
                ('position', models.CharField(blank=True, max_length=64, null=True, verbose_name='职位信息')),
                ('hire_date', models.DateTimeField(verbose_name='入职时间')),
                ('avatar', models.URLField(blank=True, null=True, verbose_name='用户头像')),
                ('sex', models.CharField(choices=[('man', '男'), ('women', '女')], max_length=8, verbose_name='性别')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户信息',
                'verbose_name_plural': '用户信息',
                'db_table': 'user_info',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AccountType',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('account_type', models.CharField(choices=[], max_length=128, null=True, verbose_name='帐号类型')),
            ],
            options={
                'verbose_name': '帐号类型',
                'verbose_name_plural': '帐号类型',
                'db_table': 'account_type',
            },
        ),
        migrations.CreateModel(
            name='BuildHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('build_id', models.IntegerField(verbose_name='构建编号')),
                ('task_id', models.CharField(max_length=256, verbose_name='任务编号')),
                ('app_name', models.CharField(max_length=128, verbose_name='项目名称')),
            ],
            options={
                'verbose_name': '构建历史',
                'verbose_name_plural': '构建历史',
                'db_table': 'build_history',
            },
        ),
        migrations.CreateModel(
            name='DatabaseRecord',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('status', models.IntegerField(choices=[(0, '已同意'), (1, '已拒绝'), (2, '审核中')], default=2)),
                ('env_name', models.CharField(max_length=64, verbose_name='环境名称')),
                ('database_name', models.CharField(max_length=64, verbose_name='库名')),
                ('desc', models.CharField(max_length=512, verbose_name='申请原因')),
                ('permissions', models.CharField(max_length=128, verbose_name='权限')),
                ('applicant', models.CharField(max_length=64, verbose_name='申请人')),
                ('account', models.CharField(max_length=128, verbose_name='帐号名称')),
                ('create_time', models.DateTimeField(auto_now=True, verbose_name='申请时间')),
            ],
            options={
                'verbose_name': '数据库记录',
                'verbose_name_plural': '数据库记录',
                'db_table': 'database_record',
            },
        ),
        migrations.CreateModel(
            name='DeployLogs',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('task_id', models.CharField(blank=True, max_length=128, null=True, verbose_name='任务编号')),
                ('project_id', models.SmallIntegerField(blank=True, null=True, verbose_name='项目ID')),
                ('message', models.CharField(blank=True, max_length=128, null=True, verbose_name='操作记录')),
                ('audit_time', models.DateTimeField(auto_now_add=True, verbose_name='审计时间')),
                ('progress', models.SmallIntegerField(blank=True, default=0, null=True, verbose_name='部署进度')),
                ('status', models.SmallIntegerField(blank=True, null=True, verbose_name='状态')),
            ],
            options={
                'verbose_name': '部署单操作日志',
                'verbose_name_plural': '部署单操作日志',
                'db_table': 'deploy_logs',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='DeployRollBack',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('project_name', models.CharField(blank=True, max_length=256, null=True, verbose_name='项目名称')),
                ('package_name', models.CharField(blank=True, max_length=128, null=True, verbose_name='回滚版本')),
                ('backup_type', models.CharField(blank=True, max_length=16, null=True, verbose_name='备份类型')),
                ('backup_time', models.DateTimeField(auto_now=True, verbose_name='备份时间')),
                ('files_md5', models.CharField(blank=True, default='null', max_length=512, null=True, verbose_name='文件md5')),
                ('namespace', models.CharField(blank=True, max_length=128, null=True, verbose_name='命名空间')),
                ('registry', models.CharField(blank=True, max_length=2048, null=True, verbose_name='镜像仓库')),
            ],
            options={
                'verbose_name': '版本回滚',
                'verbose_name_plural': '版本回滚',
                'db_table': 'deploy_rollback',
            },
        ),
        migrations.CreateModel(
            name='DeployStatusChart',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('days', models.CharField(blank=True, max_length=32, null=True, verbose_name='日期')),
                ('deploy_status', models.CharField(blank=True, max_length=16, null=True, verbose_name='部署状态')),
                ('count', models.SmallIntegerField(blank=True, null=True, verbose_name='次数')),
            ],
            options={
                'verbose_name': '状态图表',
                'verbose_name_plural': '状态图表',
                'db_table': 'deploy_status_chart',
            },
        ),
        migrations.CreateModel(
            name='GrayDomain',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain_name', models.CharField(max_length=64, unique=True, verbose_name='域名')),
            ],
            options={
                'verbose_name': '灰度管理',
                'verbose_name_plural': '灰度管理',
                'db_table': 'gray_manage',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='InnerAccount',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, null=True, verbose_name='申请人')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='申请时间')),
                ('reasons', models.CharField(max_length=1024, null=True, verbose_name='申请原因')),
                ('account_type', models.IntegerField(verbose_name='账号类型')),
                ('account_name', models.CharField(max_length=256, null=True, verbose_name='账号名称')),
                ('status', models.IntegerField(choices=[(0, '同意'), (1, '拒绝'), (2, '审核中')], default=2, verbose_name='0同意,1拒绝,2审核中')),
                ('account_zh_desc', models.CharField(max_length=256, verbose_name='账号中文描述')),
            ],
            options={
                'verbose_name': '帐号申请记录',
                'verbose_name_plural': '帐号申请记录',
                'db_table': 'inner_account',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='Server',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('instance_id', models.CharField(blank=True, max_length=256, null=True, verbose_name='实例ID')),
                ('hostname', models.CharField(max_length=32, verbose_name='主机名')),
                ('status', models.IntegerField(choices=[(0, '在线'), (1, '离线'), (2, '停用')], default=0, verbose_name='主机状态')),
                ('internet_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='公网IP')),
                ('intranet_ip', models.GenericIPAddressField(blank=True, null=True, verbose_name='私网IP')),
                ('port', models.SmallIntegerField(default=22, verbose_name='ssh端口')),
                ('mac_address', models.CharField(blank=True, max_length=128, null=True, verbose_name='物理地址')),
                ('cpu', models.CharField(blank=True, max_length=128, null=True, verbose_name='CPU型号')),
                ('cpu_num', models.SmallIntegerField(default=1, null=True, verbose_name='CPU数量')),
                ('memory', models.CharField(blank=True, max_length=128, null=True, verbose_name='内存大小')),
                ('disk', models.CharField(blank=True, max_length=256, null=True, verbose_name='磁盘容量')),
                ('bandwidth', models.SmallIntegerField(default='0', verbose_name='带宽')),
                ('os_platform', models.CharField(blank=True, default='Centos7', max_length=64, null=True, verbose_name='操作系统')),
                ('os_kernel', models.CharField(blank=True, max_length=128, null=True, verbose_name='系统内核')),
                ('regions', models.CharField(blank=True, max_length=64, null=True, verbose_name='地域')),
                ('sn', models.CharField(blank=True, max_length=128, null=True, verbose_name='SN序列号')),
                ('description', models.TextField(blank=True, max_length=256, null=True, verbose_name='备注')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='添加时间')),
            ],
            options={
                'verbose_name': '服务器信息',
                'verbose_name_plural': '服务器信息',
                'db_table': 'server_info',
            },
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('state_type', models.CharField(choices=[(0, '已关闭'), (1, '处理中'), (2, '待处理'), (3, '已完成')], max_length=1, verbose_name='状态类型')),
            ],
            options={
                'verbose_name': '工单状态',
                'verbose_name_plural': '工单状态',
                'db_table': 'ticket_state',
            },
        ),
        migrations.CreateModel(
            name='SyncJobHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sync_id', models.IntegerField(verbose_name='同步任务ID')),
                ('sync_project', models.CharField(max_length=128, verbose_name='同步任务名称')),
                ('sync_code_type', models.CharField(max_length=64, verbose_name='同步代码类型')),
                ('off_slb', models.BooleanField(verbose_name='是否下线负载均衡')),
                ('is_restart_tomcat', models.BooleanField(verbose_name='是否重启Tomcat')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('build_status', models.CharField(max_length=64, verbose_name='构建状态')),
            ],
            options={
                'verbose_name': '集群同步历史',
                'verbose_name_plural': '集群同步历史',
                'db_table': 'sync_job_history',
            },
        ),
        migrations.CreateModel(
            name='TicketType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ticket_type', models.CharField(choices=[(1, '配置变更'), (2, '域名申请'), (3, '故障提交'), (4, '数据处理'), (5, '其它')], max_length=128, null=True, verbose_name='帐号类型')),
            ],
            options={
                'verbose_name': '工单类型',
                'verbose_name_plural': '工单类型',
                'db_table': 'ticket_type',
            },
        ),
        migrations.CreateModel(
            name='VirtualHost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('internet_port', models.IntegerField(unique=True, verbose_name='外网端口')),
                ('upstream_name', models.CharField(max_length=256, verbose_name='后端名称')),
                ('forward_address', models.GenericIPAddressField(verbose_name='转发地址')),
                ('port', models.IntegerField(verbose_name='端口')),
                ('remarks', models.CharField(max_length=256, null=True, verbose_name='备注')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('creator_name', models.CharField(max_length=64, verbose_name='创建人')),
            ],
            options={
                'verbose_name': '虚拟主机',
                'verbose_name_plural': '虚拟主机',
                'db_table': 'virtual_host',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='UserToken',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(default='', max_length=512, verbose_name='用户TOKEN')),
                ('expire', models.DateTimeField(null=True, verbose_name='过期时间')),
                ('user', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': '用户token',
                'verbose_name_plural': '用户token',
                'db_table': 'user_token',
            },
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ticket_number', models.CharField(max_length=16, unique=True, verbose_name='工单编号')),
                ('name', models.CharField(max_length=112, verbose_name='工单标题')),
                ('assign_to', models.CharField(blank=True, max_length=24, null=True, verbose_name='工单处理人')),
                ('problem_content', models.TextField(verbose_name='工单内容')),
                ('result_desc', models.TextField(blank=True, null=True, verbose_name='处理结果')),
                ('created_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='提交时间')),
                ('completion_time', models.DateTimeField(default=django.utils.timezone.now, null=True, verbose_name='处理完成时间')),
                ('ticket_files', models.TextField(max_length=512, null=True, verbose_name='工单附件')),
                ('state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ticket_state_to', to='api.state', verbose_name='当前状态')),
                ('submit_account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='submit_account', to=settings.AUTH_USER_MODEL, verbose_name='工单发起人')),
                ('ticket_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ticket_type_to', to='api.tickettype', verbose_name='工单类型')),
            ],
            options={
                'verbose_name': '工单记录',
                'verbose_name_plural': '工单记录',
                'db_table': 'ticket',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=64, verbose_name='项目名称')),
                ('repo', models.CharField(blank=True, max_length=256, null=True, verbose_name='仓库地址')),
                ('is_container', models.IntegerField(choices=[(0, '容器化应用'), (1, '普通应用')], default=1, verbose_name='是否容器化, 0容器,1普通')),
                ('project_env', models.CharField(choices=[('test', '测试环境'), ('uat', '验收环境'), ('pre', '预发环境'), ('prod', '生产环境')], default='test', max_length=16, verbose_name='环境名称')),
                ('path', models.CharField(default='/data/webapps/', max_length=256, verbose_name='线上路径')),
                ('description', models.CharField(blank=True, max_length=256, null=True, verbose_name='描述信息')),
                ('created_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='添加时间')),
                ('servers', models.ManyToManyField(blank=True, to='api.Server', verbose_name='关联服务器')),
            ],
            options={
                'verbose_name': '项目信息',
                'verbose_name_plural': '项目信息',
                'db_table': 'project_info',
            },
        ),
        migrations.CreateModel(
            name='GrayType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gray_type', models.CharField(max_length=64, verbose_name='灰度类型')),
                ('created_time', models.DateTimeField(default=django.utils.timezone.now, verbose_name='创建时间')),
                ('match_content', models.CharField(max_length=256, verbose_name='匹配内容')),
                ('match_key', models.CharField(max_length=256, verbose_name='匹配KEY')),
                ('match_value', models.CharField(max_length=256, verbose_name='匹配VALUE')),
                ('creator_name', models.CharField(max_length=64, verbose_name='创建人')),
                ('gray_domain', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.graydomain')),
            ],
            options={
                'verbose_name': '灰度规则',
                'verbose_name_plural': '灰度规则',
                'db_table': 'gray_rules',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='DeployTask',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('task_id', models.CharField(max_length=64, verbose_name='任务标识')),
                ('title', models.CharField(max_length=256, verbose_name='发布原因')),
                ('version', models.CharField(max_length=256, verbose_name='上线版本')),
                ('status', models.IntegerField(choices=[(1, '待审批'), (2, '已通过'), (3, '部署中'), (4, '部署成功'), (5, '部署失败'), (6, '已拒绝')], default=1, verbose_name='状态')),
                ('before_comment', models.TextField(blank=True, null=True, verbose_name='上线说明')),
                ('dingtalk_notice', models.BooleanField(default=True, verbose_name='钉钉通知')),
                ('approval_user', models.CharField(max_length=64, verbose_name='审批人')),
                ('test_report', models.FileField(max_length=256, null=True, upload_to='', verbose_name='测试报告')),
                ('develop_user', models.CharField(max_length=64, verbose_name='研发人员')),
                ('online_time', models.DateTimeField(blank=True, null=True, verbose_name='应用上线时间')),
                ('created_time', models.DateTimeField(auto_now_add=True, verbose_name='提交时间')),
                ('submit_people', models.CharField(max_length=32, verbose_name='提交人')),
                ('refuse_msg', models.CharField(blank=True, max_length=256, null=True, verbose_name='拒绝原因')),
                ('deploy_env', models.CharField(max_length=32, verbose_name='环境信息(test,prod,uat,dev)')),
                ('deploy_type', models.CharField(max_length=32, verbose_name='部署类型(INC, CONTAINER)')),
                ('original_file_name', models.CharField(blank=True, max_length=256, null=True, verbose_name='原始文件名')),
                ('project', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='project', to='api.project', verbose_name='项目环境')),
                ('submit_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='submit_user_id', to=settings.AUTH_USER_MODEL, verbose_name='提交用户ID')),
            ],
            options={
                'verbose_name': '部署任务单',
                'verbose_name_plural': '部署任务单',
                'db_table': 'deploy_task',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='ApprovedGroup',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('approval_name', models.CharField(max_length=64, verbose_name='审批人')),
                ('sponsor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sponsor_user', to=settings.AUTH_USER_MODEL, verbose_name='提交人')),
            ],
            options={
                'verbose_name': '审批设置',
                'verbose_name_plural': '审批设置',
                'db_table': 'approved_users',
            },
        ),
    ]
